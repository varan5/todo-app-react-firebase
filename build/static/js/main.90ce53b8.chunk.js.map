{"version":3,"sources":["firebase-config.js","Todo.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","Todo","todo","inprogress","id","style","display","ListItem","ListItemText","primary","secondary","Button","onClick","collection","doc","update","delete","App","useState","todos","setTodos","todoInput","setTodoInput","useEffect","onSnapshot","querySnapshot","docs","map","data","className","flexDirection","justifyContent","alignItems","width","TextField","label","value","maxWidth","onChange","e","target","type","variant","preventDefault","add","timestamp","FieldValue","serverTimestamp","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAWEA,IAASC,cATY,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,gBACnBC,MAAO,+CAKT,IAAMC,EAAKR,IAASS,Y,0BCkBPC,MA3Bf,YAAyC,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,WAAYC,EAAM,EAANA,GAWhC,OACE,sBAAKC,MAAO,CAAEC,QAAS,QAAvB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,QAASP,EACTQ,UAAWP,EAAa,aAAe,gBAG3C,cAACQ,EAAA,EAAD,CAAQC,QAlBa,WACvBb,EAAGc,WAAW,SAASC,IAAIV,GAAIW,OAAO,CACpCZ,YAAaA,KAgBb,SACGA,EAAa,OAAS,WAEzB,cAACQ,EAAA,EAAD,CAAQC,QAfU,WAClBb,EAAGc,WAAW,SAASC,IAAIV,GAAIY,UAc/B,mBC0DSC,MA5Ef,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,KAgCb,OA5BAC,qBAAU,WAKRxB,EAAGc,WAAW,SAASW,YAAW,SAAUC,GAC1CL,EACEK,EAAcC,KAAKC,KAAI,SAACb,GAAD,MAAU,CAC/BV,GAAIU,EAAIV,GACRF,KAAMY,EAAIc,OAAO1B,KACjBC,WAAYW,EAAIc,OAAOzB,qBAR5B,IA2BD,qBAAK0B,UAAU,MAAf,SACE,sBACExB,MAAO,CACLC,QAAS,OACTwB,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,MAAO,QANX,UASE,+DACA,iCACE,cAACC,EAAA,EAAD,CACE9B,GAAG,iBACH+B,MAAM,eACNC,MAAOf,EACPhB,MAAO,CAAE4B,MAAO,OAAQI,SAAU,SAClCC,SAAU,SAACC,GAAD,OAAOjB,EAAaiB,EAAEC,OAAOJ,UAEzC,cAACzB,EAAA,EAAD,CACE8B,KAAK,SACLC,QAAQ,YACR9B,QAnCV,SAAiB2B,GACfA,EAAEI,iBAEF5C,EAAGc,WAAW,SAAS+B,IAAI,CACzBzC,YAAY,EACZ0C,UAAWtD,IAASS,UAAU8C,WAAWC,kBACzC7C,KAAMmB,IAGRC,EAAa,KA2BLjB,MAAO,CAAEC,QAAS,QAJpB,wBAUF,qBAAKD,MAAO,CAAE4B,MAAO,OAAQI,SAAU,QAASW,UAAW,QAA3D,SACG7B,EAAMQ,KAAI,SAACzB,GAAD,OACT,cAAC,EAAD,CACEA,KAAMA,EAAKA,KACXC,WAAYD,EAAKC,WACjBC,GAAIF,EAAKE,gBCtEvB6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.90ce53b8.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDCM1ZutYkOG5kqSvyiEt4cTSJHOfnDkyk\",\r\n    authDomain: \"todoapp-cdf97.firebaseapp.com\",\r\n    projectId: \"todoapp-cdf97\",\r\n    storageBucket: \"todoapp-cdf97.appspot.com\",\r\n    messagingSenderId: \"1022665977797\",\r\n    appId: \"1:1022665977797:web:b514ce0d526e18e430a5ac\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig)\r\n\r\n  const db = firebase.firestore()\r\n\r\n   export { db }","import { Button, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { db } from \"./firebase-config\";\r\n\r\nfunction Todo({ todo, inprogress, id }) {\r\n  const toggleInProgress = () => {\r\n    db.collection(\"todos\").doc(id).update({\r\n      inprogress: !inprogress,\r\n    });\r\n  };\r\n\r\n  const deleteHandler = () => {\r\n      db.collection(\"todos\").doc(id).delete()\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <ListItem>\r\n        <ListItemText\r\n          primary={todo}\r\n          secondary={inprogress ? \"inprogress\" : \"completed\"}\r\n        />\r\n      </ListItem>\r\n      <Button onClick={toggleInProgress}>\r\n        {inprogress ? \"Done\" : \"Undone\"}\r\n      </Button>\r\n      <Button onClick={deleteHandler}>X</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import \"./App.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { db } from \"./firebase-config\";\nimport firebase from \"firebase\";\nimport TodoListItem from \"./Todo\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todoInput, setTodoInput] = useState(\"\");\n\n  useEffect(() => {\n    getTodos();\n  }, []); // blank to run only on first launch\n\n  function getTodos() {\n    db.collection(\"todos\").onSnapshot(function (querySnapshot) {\n      setTodos(\n        querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          todo: doc.data().todo,\n          inprogress: doc.data().inprogress,\n        }))\n      );\n    });\n  }\n\n  function addTodo(e) {\n    e.preventDefault();\n\n    db.collection(\"todos\").add({\n      inprogress: true,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      todo: todoInput,\n    });\n\n    setTodoInput(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <h1>Varan's Todo App ðŸ˜ƒ</h1>\n        <form>\n          <TextField\n            id=\"standard-basic\"\n            label=\"Write a Todo\"\n            value={todoInput}\n            style={{ width: \"90vw\", maxWidth: \"500px\" }}\n            onChange={(e) => setTodoInput(e.target.value)}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            onClick={addTodo}\n            style={{ display: \"none\" }}\n          >\n            Default\n          </Button>\n        </form>\n\n        <div style={{ width: \"90vw\", maxWidth: \"500px\", marginTop: \"24px\" }}>\n          {todos.map((todo) => (\n            <TodoListItem\n              todo={todo.todo}\n              inprogress={todo.inprogress}\n              id={todo.id}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}